# Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
%matplotlib inline

# Step 1: Reading the CSV file into a DataFrame
filename = 'data.csv'
df = pd.read_csv(filename)
print(df.head())

# Step 2: Getting details about the columns in the dataset
df.info()

# Step 3: Dropping unnecessary columns
dropped_columns = ['Engine Fuel Type', 'Market Category', 'Vehicle Style', 'Number of Doors', 'Vehicle Size']
df = df.drop(columns=dropped_columns)
print(df.head())

# Step 4: Renaming columns
df = df.rename(columns={
    'Engine HP': 'HP',
    'Engine Cylinders': 'Cylinders',
    'Transmission Type': 'Transmission',
    'highway MPG': 'MPG_H',
    'city mpg': 'MPG_C'
})
print(df.head())

# Step 5: Finding and counting duplicate rows
duplicated_rows = df.duplicated().sum()
print("Number of duplicated rows:", duplicated_rows)

# Step 6: Removing duplicate rows
df = df.drop_duplicates()
num_rows, num_columns = df.shape
print("Number of remaining rows after removing duplicate rows:", num_rows)
print("Number of columns:", num_columns)

# Step 7: Finding missing data in the columns
missing_data = df.isna().sum()
print("Missing data in each column:")
print(missing_data)

# Step 8: Filling missing values in 'Cylinders' with zeros
df['Cylinders'] = df['Cylinders'].fillna(0)
print(df.head())

# Step 9: Filling missing values in 'HP' with the mean
mean_hp = df['HP'].mean()
df['HP'] = df['HP'].fillna(mean_hp)
missing_data = df.isna().sum()
print("Missing data in each column after filling missing values:")
print(missing_data)

# Step 10: Descriptive statistics for the dataset
print(df.describe())

# Answering questions based on the descriptive statistics
# Maximum horsepower (HP) in the dataset
max_hp = df['HP'].max()
print("Maximum horsepower (HP):", max_hp)

# Minimum city MPG in the dataset
min_city_mpg = df['MPG_C'].min()
print("Minimum city MPG:", min_city_mpg)

# Maximum highway MPG in the dataset
max_highway_mpg = df['MPG_H'].max()
print("Maximum highway MPG:", max_highway_mpg)

# Maximum price (MSRP) in the dataset
max_msrp = df['MSRP'].max()
print("Maximum price (MSRP):", max_msrp)

# Step 11: Creating boxplots for HP, Cylinders, MPG_H, MPG_C, and MSRP

# Boxplot for HP
plt.figure(figsize=(9, 7))
plt.boxplot(df['HP'], vert=False)
plt.title('HP Boxplot')
plt.show()

# Boxplot for Cylinders
plt.figure(figsize=(9, 7))
plt.boxplot(df['Cylinders'], vert=False)
plt.title('Cylinders Boxplot')
plt.show()

# Boxplot for MPG_H
plt.figure(figsize=(9, 7))
plt.boxplot(df['MPG_H'], vert=False)
plt.title('MPG_H Boxplot')
plt.show()

# Boxplot for MPG_C
plt.figure(figsize=(9, 7))
plt.boxplot(df['MPG_C'], vert=False)
plt.title('MPG_C Boxplot')
plt.show()

# Boxplot for MSRP
plt.figure(figsize=(9, 7))
plt.boxplot(df['MSRP'], vert=False)
plt.title('MSRP Boxplot')
plt.show()

# Step 12: Removing outliers for HP and MSRP

# Calculating the lower and upper cutoff values for HP
Q1_HP = df['HP'].quantile(0.25)
Q3_HP = df['HP'].quantile(0.75)
IQR_HP = Q3_HP - Q1_HP
lower_cutoff_HP = Q1_HP - 1.5 * IQR_HP
upper_cutoff_HP = Q3_HP + 1.5 * IQR_HP
print("Lower cutoff values for HP outliers:", lower_cutoff_HP)
print("Upper cutoff values for HP outliers:", upper_cutoff_HP)

# Calculating the lower and upper cutoff values for MSRP
Q1_MSRP = df['MSRP'].quantile(0.25)
Q3_MSRP = df['MSRP'].quantile(0.75)
IQR_MSRP = Q3_MSRP - Q1_MSRP
lower_cutoff_MSRP = Q1_MSRP - 1.5 * IQR_MSRP
upper_cutoff_MSRP = Q3_MSRP + 1.5 * IQR_MSRP
print("Lower cutoff values for MSRP outliers:", lower_cutoff_MSRP)
print("Upper cutoff values for MSRP outliers:", upper_cutoff_MSRP)

# Removing outliers from the dataset
df_cleaned = df[
    (df['HP'] >= lower_cutoff_HP) & (df['HP'] <= upper_cutoff_HP) &
    (df['MSRP'] >= lower_cutoff_MSRP) & (df['MSRP'] <= upper_cutoff_MSRP)
]
print(df_cleaned.describe())

# Step 13: Creating new boxplots for HP and MSRP after removing outliers

# Boxplot for HP (outliers removed)
plt.figure(figsize=(8, 6))
sns.boxplot(data=df_cleaned, x='HP')
plt.title('HP Boxplot (Outliers Removed)')
plt.show()

# Boxplot for MSRP (outliers removed)
plt.figure(figsize=(8, 6))
sns.boxplot(data=df_cleaned, x='MSRP')
plt.title('MSRP Boxplot (Outliers Removed)')
plt.show()

# Step 14: Creating a bar plot for the count of each Make of car
unique_make_values, unique_counts = np.unique(df_cleaned['Make'], return_counts=True)
plt.figure(figsize=(8, 6))
plt.barh(unique_make_values, unique_counts)
plt.title('Count of Each Make of Car')
plt.xlabel('Count')
plt.ylabel('Car Make')
plt.show()

# Step 15: Creating a histogram for HP distribution
plt.figure(figsize=(9, 6))
sns.histplot(data=df_cleaned, x='HP', kde=True)
plt.title('HP Distribution')
plt.show()

# Step 16: Creating a histogram for MSRP distribution
plt.figure(figsize=(9, 6))
sns.histplot(data=df_cleaned, x='MSRP', kde=True)
plt.title('MSRP Distribution')
plt.show()

# Step 17: Creating a pairplot for all numeric variables
sns.pairplot(df_cleaned, diag_kind="kde")
plt.show()

# Step 18: Creating a regression plot for HP and MSRP
plt.figure(figsize=(9, 6))
sns.lmplot(data=df_cleaned, x='HP', y='MSRP')
plt.xlabel('Horsepower (HP)')
plt.ylabel('MSRP')
plt.title('HP and MSRP Linear Relationship')
plt.show()

# Step 19: Calculating linear regression using SciPy's stats module
x = df_cleaned['HP']
y = df_cleaned['MSRP']
result = stats.linregress(x, y)
print("R-squared (R2) value:", result.rvalue ** 2)

# Recreating the regression plot
plt.figure(figsize=(9, 6))
plt.plot(x, y, 'o', label='original data')
plt.plot(x, result.intercept + result.slope*x, 'r', label='fitted line')
plt.legend()
plt.title('HP and MSRP Linear Regression')
plt.xlabel('Horsepower (HP)')
plt.ylabel('MSRP')
plt.show()

# Step 20: Extra Credit - Improving the linear regression model by removing remaining outliers at the low end of the MSRP range
df_no_low_msrp = df_cleaned[df_cleaned['MSRP'] > lower_cutoff_MSRP]
x = df_no_low_msrp['HP']
y = df_no_low_msrp['MSRP']
result_improved = stats.linregress(x, y)
r_squared_improved = result_improved.rvalue ** 2
print("Improved R-squared (R2) value:", r_squared_improved)

# Plotting the improved regression
plt.figure(figsize=(10, 6))
plt.scatter(x, y)
plt.plot(x, result_improved.intercept + result_improved.slope * x, 'r', label='Fitted line')
plt.title('HP and MSRP Improved Linear Regression')
plt.xlabel('Horsepower (HP)')
plt.ylabel('MSRP')
plt.grid(True)
plt.text(300, 90000, f'R2 = {r_squared_improved:.4f}', fontsize=10)
plt.show()


## Analysis Summary

### Data Cleaning: Unnecessary columns were dropped, missing values were handled appropriately, and duplicate rows were removed.
### Descriptive Statistics: Provided an overview of the dataset, including maximum HP, minimum city MPG, maximum highway MPG, and maximum MSRP.
### Outlier Removal: Identified and removed outliers using the IQR method to enhance data quality.
### Visualizations: Created various plots, including histograms, box plots, bar plots, and pair plots, to explore data distributions and relationships.
### Linear Regression: Performed linear regression to investigate the relationship between HP and MSRP, achieving an improved R-squared value after removing additional outliers.

### This comprehensive analysis provides insights into the car dataset and demonstrates how exploratory data analysis can uncover patterns and relationships in the data.
